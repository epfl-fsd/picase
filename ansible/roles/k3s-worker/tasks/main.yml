---
- name: Get node token from the first control node
  ansible.builtin.set_fact:
      k3s_node_token: "{{ hostvars[groups['master'][0]]['k3s_node_token'] }}"

- name: Get master node IP
  ansible.builtin.set_fact:
      master_ip: "{{ hostvars[groups['master'][0]]['ansible_host'] }}"
  run_once: true

- name: Check K3s service state on worker nodes
  ansible.builtin.shell: systemctl is-active k3s-agent || systemctl is-active k3s || echo "not-active"
  register: k3s_worker_state
  failed_when: false

- name: Wait if K3s agent is activating
  ansible.builtin.shell: |
      for i in $(seq 1 10); do
        if [ "$(systemctl is-active k3s-agent 2>/dev/null || systemctl is-active k3s 2>/dev/null)" = "activating" ]; then
          echo "K3s agent is activating, waiting... (attempt $i/10)"
          sleep 10
        else
          break
        fi
      done
      systemctl is-active k3s-agent 2>/dev/null || systemctl is-active k3s 2>/dev/null || echo "not-active"
  register: k3s_worker_final_state
  when: k3s_worker_state.stdout == "activating"

- name: Reset failed K3s service if it exists but failed
  ansible.builtin.shell: |
      if systemctl status k3s-agent >/dev/null 2>&1; then
        systemctl stop k3s-agent || true
        systemctl reset-failed k3s-agent || true
        systemctl disable k3s-agent || true
      fi
      if systemctl status k3s >/dev/null 2>&1; then
        systemctl stop k3s || true
        systemctl reset-failed k3s || true
        systemctl disable k3s || true
      fi
      [ -f /usr/local/bin/k3s-killall.sh ] && /usr/local/bin/k3s-killall.sh || true
      [ -f /usr/local/bin/k3s-agent-uninstall.sh ] && /usr/local/bin/k3s-agent-uninstall.sh || true
  when:
      - k3s_worker_final_state.stdout is defined and k3s_worker_final_state.stdout == "failed"

- name: Echo command to install K3s on worker nodes
  ansible.builtin.debug:
      msg: "curl -sfL https://get.k3s.io | K3S_URL=https://{{ master_ip }}:6443 K3S_TOKEN={{ k3s_node_token }} sh -s - agent --kubelet-arg='max-pods=110'"

- name: Install K3s on worker nodes
  ansible.builtin.shell: |
      curl -sfL https://get.k3s.io | K3S_URL=https://{{ master_ip }}:6443 K3S_TOKEN={{ k3s_node_token }} sh -s - agent \
      --kubelet-arg="max-pods=110"
  when:
      - (k3s_worker_final_state.stdout is defined and k3s_worker_final_state.stdout != "active") or
        (k3s_worker_state.stdout != "active" and k3s_worker_state.stdout != "activating" and k3s_worker_final_state.stdout is not defined)
  register: k3s_worker_install_result
  failed_when: k3s_worker_install_result.rc != 0 and "Already installed" not in k3s_worker_install_result.stderr

- name: Wait for worker nodes to be active
  ansible.builtin.shell: |
      for i in $(seq 1 20); do
        if [ "$(systemctl is-active k3s-agent 2>/dev/null || systemctl is-active k3s 2>/dev/null || echo 'not-active')" = "active" ]; then
          echo "K3s agent is now active on worker node"
          break
        elif [ "$(systemctl is-active k3s-agent 2>/dev/null || systemctl is-active k3s 2>/dev/null || echo 'not-active')" = "activating" ]; then
          echo "K3s agent is still activating on worker node (attempt $i/20)"
        else
          echo "K3s agent is in unexpected state on worker node"
        fi
        sleep 10
        if [ $i -eq 20 ]; then
          echo "Timed out waiting for K3s agent on worker node"
          exit 1
        fi
      done
  register: k3s_worker_activation_wait
  when: k3s_worker_install_result.changed|default(false)
